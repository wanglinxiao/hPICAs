#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Reconstruct ancestral sequences using FastML based on multiple sequence alignments and evolutionary trees.

Input:
- MSA files (*.align.fa) generated by MUSCLE
- Tree files (*.newick) generated by phyloFit
- Input file name defines the subdirectory for each set of data

Output:
- Ancestral sequences for each human_peak in FASTML output directories
"""

import os
import sys
import subprocess
from multiprocess import Pool

# ----------------------------- #
# Configuration and Paths      #
# ----------------------------- #

# Input/Output directories
MSA_DIR = sys.argv[1]
TREE_DIR = sys.argv[2]
OUTPUT_DIR = sys.argv[3]
os.makedirs(OUTPUT_DIR, exist_ok=True)

# File to record failed peaks for rerun
ERROR_LOG = os.path.join(OUTPUT_DIR, 'fastml_error_peak.txt')

# Path to FastML and its Perl wrapper
FASTML_WRAPPER = '~/FastML.v3.11/www/fastml/FastML_Wrapper.pl'
PERL_EXEC = '~/bin/perl'

# ----------------------------- #
# Ancestral Sequence Inference #
# ----------------------------- #

def infer_ancestral_sequence(human_peak):
    """Run FastML to reconstruct ancestral sequence for a given human_peak."""
    msa_path = os.path.join(MSA_DIR, f'{human_peak}.align.fa')
    tree_path = os.path.join(TREE_DIR, f'{human_peak}.newick')
    output_path = os.path.join(OUTPUT_DIR, human_peak)

    if not os.path.exists(msa_path) or not os.path.exists(tree_path):
        print(f"[Warning] Missing MSA or tree for {human_peak}, skipped.")
        return

    cmd = (
        f"{PERL_EXEC} {FASTML_WRAPPER} "
        f"--MSA_File {msa_path} "
        f"--seqType nuc "
        f"--Tree {tree_path} "
        f"--SubMatrix GTR "
        f"--indelReconstruction ML "
        f"--outDir {output_path}"
    )

    try:
        subprocess.run(cmd, shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=120)
    except subprocess.TimeoutExpired:
        print(f"[Timeout] FastML timed out for {human_peak}.")
        with open(ERROR_LOG, 'a') as err_file:
            err_file.write(f"{human_peak}\n")
    except Exception as e:
        print(f"[Error] FastML failed for {human_peak}: {e}")
        with open(ERROR_LOG, 'a') as err_file:
            err_file.write(f"{human_peak}\n")


# ----------------------------- #
# Main Entry: Parallel Inference
# ----------------------------- #

if __name__ == '__main__':
    # Extract peak names from existing .newick files
    newick_files = [f for f in os.listdir(TREE_DIR) if f.endswith('.newick')]
    human_peaks = [f.split('.')[0] for f in newick_files]

    # Run FastML in parallel
    with Pool(processes=8) as pool:
        pool.map(infer_ancestral_sequence, human_peaks)
